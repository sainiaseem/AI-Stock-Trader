# -*- coding: utf-8 -*-
"""Backtesting with bollinger band

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHVGC7qEE5qQxEpPs7ygqy2sIj_dYKdg
"""

pip install pandas numpy matplotlib yfinance

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

def fetch_data(ticker, start, end):
    """
    Fetch historical stock data using yfinance.
    """
    data = yf.download(ticker, start=start, end=end)
    data.dropna(inplace=True)
    return data

# Example usage
ticker = "AAPL"
start_date = "2022-01-01"
end_date = "2023-01-01"
data = fetch_data(ticker, start_date, end_date)
print(data.head())

def calculate_indicators(data, sma_period=20, std_dev=2):
    """
    Calculate Bollinger Bands and Simple Moving Average (SMA).
    """
    # Calculate SMA
    data['SMA'] = data['Close'].rolling(window=sma_period).mean()

    # Calculate standard deviation
    data['STD'] = data['Close'].rolling(window=sma_period).std()

    # Calculate Bollinger Bands
    data['Upper Band'] = data['SMA'] + (std_dev * data['STD'])
    data['Lower Band'] = data['SMA'] - (std_dev * data['STD'])

    return data

# Calculate indicators
data = calculate_indicators(data)

def implement_strategy(data):
    """
    Implement the Bollinger Bands trading strategy.
    """
    data['Position'] = 0
    data['Buy Signal'] = 0
    data['Sell Signal'] = 0

    # Generate signals based on Bollinger Bands
    # Use .iterrows() to iterate over DataFrame rows with their index and values
    for index, row in data.iterrows():
        if row['Close'] < row['Lower Band']:
            data.at[index, 'Position'] = 1  # Buy
            data.at[index, 'Buy Signal'] = 1
        elif row['Close'] > row['Upper Band']:
            data.at[index, 'Position'] = -1  # Sell
            data.at[index, 'Sell Signal'] = 1
        else:
            # For the first row, there's no previous position, so set it to 0
            if index == data.index[0]:
                data.at[index, 'Position'] = 0
            else:
                # Get the previous index
                previous_index = data.index[data.index.get_loc(index) - 1]
                data.at[index, 'Position'] = data.at[previous_index, 'Position']

    return data

def backtest_strategy(data, initial_balance=10000):
    """
    Backtest the trading strategy.
    """
    balance = initial_balance
    shares = 0
    for i in range(1, len(data)):
        # Buy signal
        if data['Buy Signal'][i] == 1 and balance > 0:
            shares = balance / data['Close'][i]
            balance = 0
            print(f"Buying {shares:.2f} shares at ${data['Close'][i]:.2f}")

        # Sell signal
        elif data['Sell Signal'][i] == 1 and shares > 0:
            balance = shares * data['Close'][i]
            shares = 0
            print(f"Selling at ${data['Close'][i]:.2f}, Balance: ${balance:.2f}")

    # Final portfolio value
    if shares > 0:
        balance += shares * data['Close'].iloc[-1]

    return balance

final_balance = backtest_strategy(data)
print(f"Final Portfolio Value: ${final_balance:.2f}")

def plot_results(data):
    plt.figure(figsize=(14, 10))
    plt.plot(data['Close'], label='Close Price')
    plt.plot(data['SMA'], label='SMA', linestyle='--')
    plt.plot(data['Upper Band'], label='Upper Band', linestyle='--')
    plt.plot(data['Lower Band'], label='Lower Band', linestyle='--')

    # Plot buy and sell signals
    # Filter out rows where 'Buy Signal' is 0 before plotting
    buy_signals = data[data['Buy Signal'] == 1]
    sell_signals = data[data['Sell Signal'] == 1]

    plt.scatter(buy_signals.index, buy_signals['Close'], label='Buy Signal', marker='^', color='g')
    plt.scatter(sell_signals.index, sell_signals['Close'], label='Sell Signal', marker='v', color='r')

    plt.title('Bollinger Bands Strategy')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()
plot_results(data)

